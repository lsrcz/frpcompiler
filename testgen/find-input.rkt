#lang rosette/safe

(require "sym-trace.rkt"
         "../interpret/analyzed.rkt"
         "../interpret/environment.rkt"
         "../interpret/spec.rkt"
         "../test/test-spec.rkt")

(define (find-input spec binding sym-trace output)
  (time (synthesize #:forall (list)
              #:guarantee (assert (equal? (interpret-spec spec sym-trace binding) output)))))

(define (main1)
  (define (test-case1)
    (define spec-input (spec '(a) 'b '() '() '((a (return a)))))
    (define binding (list))
    (define sym-trace (get-symbolic-trace (list (cons 'a integer-constructor)) 2))
    (define concrete-trace (trace (list (event 'a 1) (event 'a 10))))
    (define output (list (event 'b 1) (event 'b 10)))
    (define m (find-input spec-input binding sym-trace output))
    (displayln (evaluate sym-trace m)))
  ;(test-case1)

  (define (test-case2)
    (define spec-input (spec '(a c) 'b '() '() '((a (return c)) (c (return a)))))
    (define binding (list))
    (define sym-trace (get-symbolic-trace (list (cons 'a integer-constructor) (cons 'c integer-constructor)) 5))
    (define concrete-trace (trace (list (event 'a 1) (event 'c 30) (event 'c 20) (event 'a 10) (event 'a 10))))
    (define m (find-input spec-input binding sym-trace (interpret-spec spec-input concrete-trace binding)))
    (displayln (evaluate sym-trace m)))
  ;(test-case2)

  (define (test-case3)
    (define spec-input (spec '(a d) 'b '(f) '(t) '((a (if d (return (f a (prev a))))))))
    (define binding-input (list (binding 'f +) (binding 'g -) (binding 'not not)))
    (define sym-trace (get-symbolic-trace (list (cons 'a integer-constructor) (cons 'd boolean-constructor)) 8))
    (define concrete-trace (trace
                            (list
                             (event 'd #t)
                             (event 'a 1)
                             (event 'a 2)
                             (event 'd #f)
                             (event 'a 3)
                             (event 'd #t)
                             (event 'a 4)
                             (event 'a 5))))
    (define m (find-input spec-input binding-input sym-trace (interpret-spec spec-input concrete-trace binding-input)))
    (displayln (evaluate sym-trace m)))
  ;(test-case3)

  (define (test-case4)
    (define spec-input (spec '(a d) 'b '(f) '(t) '((a (if-else d (return (f a (prev a))) (return (g a (prev a))))))))
    (define binding-input (list (binding 'f +) (binding 'g -) (binding 'not not)))
    (define sym-trace (get-symbolic-trace (list (cons 'a integer-constructor) (cons 'd boolean-constructor)) 8))
    (define concrete-trace (trace
                            (list
                             (event 'd #t)
                             (event 'a 1)
                             (event 'a 2)
                             (event 'd #f)
                             (event 'a 3)
                             (event 'd #t)
                             (event 'a 4)
                             (event 'a 5))))
    (define m (find-input spec-input binding-input sym-trace (interpret-spec spec-input concrete-trace binding-input)))
    (displayln (evaluate sym-trace m)))
  ;(test-case4)

  (define (test-case5)
    (define spec-input (spec '(a d) 'b '(f) '(t) '((a (begin (let t (not d))
                                                      (let x (not (not t)))
                                                      (if-else x (return a) (return (f a (prev a)))))))))
    (define binding-input (list (binding 'f +) (binding 'g -) (binding 'not not)))
    (define sym-trace (get-symbolic-trace (list (cons 'a integer-constructor) (cons 'd boolean-constructor)) 24))
    (define concrete-trace (trace
                            (list
                             (event 'd #t)
                             (event 'a 1)
                             (event 'a 2)
                             (event 'd #f)
                             (event 'a 3)
                             (event 'd #t)
                             (event 'a 4)
                             (event 'a 5)
                             (event 'd #t)
                             (event 'a 1)
                             (event 'a 2)
                             (event 'd #f)
                             (event 'a 3)
                             (event 'd #t)
                             (event 'a 4)
                             (event 'a 5)
                             (event 'd #t)
                             (event 'a 1)
                             (event 'a 2)
                             (event 'd #f)
                             (event 'a 3)
                             (event 'd #t)
                             (event 'a 4)
                             (event 'a 5))))
    (define m (find-input spec-input binding-input sym-trace (interpret-spec spec-input concrete-trace binding-input)))
    (displayln (evaluate sym-trace m)))
  ;(test-case5)

  (define (test-case6)
    (define spec-input (spec '(a b c) 'd '() '()
                             '((a (split ((a1 (add1 a)))
                                         (if (> a1 t)
                                             (new-stream ((b (split ((b1 (add1 b)))
                                                                    (if-else (> b1 x) (new-stream ((c (return (+ a1 b1 c))))) (empty-stream))))))))))))
    (define binding-input (list
                           (binding 'add1 add1)
                           (binding '+ +)
                           (binding '- -)
                           (binding 'not not)
                           (binding 'undefined? undefined?)
                           (binding '> >)
                           (binding 't 1)
                           (binding 'x 1)
                           (binding 'undefined 'undefined)))
    (define concrete-trace
      (trace
       (list
        (event 'c 1)
        (event 'b 0)
        (event 'c 2)
        (event 'b 1)
        (event 'c 3)
        #|(event 'a 0)
        (event 'c 1)
        (event 'b 0)
        (event 'c 2)
        (event 'b 1)
        (event 'c 3)
        (event 'a 1)
        (event 'c 1)
        (event 'b 0)
        (event 'c 2)
        (event 'b 1)
        (event 'c 3)
        (event 'a 0)
        (event 'c 3)|#

        )))
    (define sym-trace (get-symbolic-trace
                       (list (cons 'a integer-constructor)
                             (cons 'b integer-constructor)
                             (cons 'c integer-constructor))
                       (length (trace-event-lst concrete-trace))))

    (define m (find-input spec-input binding-input sym-trace (interpret-spec spec-input concrete-trace binding-input)))
    (displayln (evaluate sym-trace m)))
  ;(test-case6)

  (define (test-case7)
    (define spec-input (spec '(a b) 'd '(add1 + - not >) '(t x)
                       '((a (split ((a1 (add1 a)))
                                   (if (> a1 t)
                                       (new-stream ((b (if-else (undefined? d) (return (add1 (+ a1 b))) (return (+ b d))))))))))))
    (define binding-input (list
                           (binding 'add1 add1)
                           (binding '+ +)
                           (binding '- -)
                           (binding 'not not)
                           (binding 'undefined? undefined?)
                           (binding '> >)
                           (binding 't 1)
                           (binding 'x 1)
                           (binding 'undefined 'undefined)))
    (define concrete-trace
      (trace
       (list
        (event 'b 10)
        (event 'b 11)
        (event 'a 0)
        (event 'b 10)
        (event 'b 11)
        (event 'a 1)
        (event 'b 10)
        (event 'b 11)
        (event 'a 2)
        (event 'b 10)
        (event 'b 11)
        (event 'b 10)
        (event 'b 11)
        (event 'a 0)
        (event 'b 10)
        (event 'b 11)
        (event 'a 1)
        (event 'b 10)
        (event 'b 11)
        (event 'a 2)
        (event 'b 10)
        (event 'b 11)
        (event 'b 10)
        (event 'b 11)
        (event 'a 0)
        (event 'b 10)
        (event 'b 11)
        (event 'a 1)
        (event 'b 10)
        (event 'b 11)
        (event 'a 2)
        (event 'b 10)
        (event 'b 11)

        )))
    (define sym-trace (get-symbolic-trace
                       (list (cons 'a integer-constructor)
                             (cons 'b integer-constructor))
                       (length (trace-event-lst concrete-trace))))

    (define m (find-input spec-input binding-input sym-trace (interpret-spec spec-input concrete-trace binding-input)))
    (displayln (evaluate sym-trace m)))
  (test-case7)


  )

(main1)
